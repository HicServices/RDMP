// Copyright (c) The University of Dundee 2018-2019
// This file is part of the Research Data Management Platform (RDMP).
// RDMP is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// RDMP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with RDMP. If not, see <https://www.gnu.org/licenses/>.

using MapsDirectlyToDatabaseTable;
using Rdmp.Core.Curation.Data;
using Rdmp.Core.Curation.Data.Cohort;
using System.IO;
using System.Text.RegularExpressions;

namespace Rdmp.Core.DataExport.Data
{
    /// <summary>
    /// Generates and parses strings recorded in <see cref="ExtractableCohort.AuditLog"/>
    /// </summary>
    public class ExtractableCohortAuditLogBuilder
    {
        Regex _regexGetID = new Regex(@"\(ID=(\d+)\)");
        Regex _regexGetFilePath = new Regex(@$"{InExtractionInformation} '(.*)'");

        const string InFile = "Patient identifiers in file";
        const string InCohortIdentificationConfiguration = "Patients in CohortIdentificationConfiguration";
        const string InExtractionInformation = "All patient identifiers in ExtractionInformation";

        /// <summary>
        /// Returns a human readable description recording that an <see cref="ExtractableCohort"/>
        /// was generated by running the given <paramref name="cic"/>
        /// </summary>
        /// <param name="cic"></param>
        /// <returns></returns>
        public string GetDescription(CohortIdentificationConfiguration cic)
        {
            return InCohortIdentificationConfiguration + " '" + cic + "' (ID=" + cic.ID + ")";
        }

        /// <summary>
        /// Returns a human readable description recording that an <see cref="ExtractableCohort"/>
        /// was generated by fetching identifiers from the given column <paramref name="extractionIdentifierColumn"/>
        /// </summary>
        /// <param name="extractionIdentifierColumn"></param>
        /// <returns></returns>
        public string GetDescription(ExtractionInformation extractionIdentifierColumn)
        {
            return InExtractionInformation + " '" + extractionIdentifierColumn.CatalogueItem.Catalogue + "." + extractionIdentifierColumn.GetRuntimeName() + "'  (ID=" + extractionIdentifierColumn.ID + ")";
        }

        /// <summary>
        /// Returns a human readable description recording that an <see cref="ExtractableCohort"/>
        /// was generated by reading identifiers in the given <paramref name="file"/> 
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        public string GetDescription(FileInfo file)
        {
            return InFile + " '" + file.FullName + "'";
        }

        /// <summary>
        /// Returns the object that was the source of the given <paramref name="cohort"/>. 
        /// May be a file or a <see cref="CohortIdentificationConfiguration"/> or other things or
        /// null if its not possible to work out what created the cohort.
        /// </summary>
        /// <param name="cohort"></param>
        /// <returns></returns>
        public object GetObjectIfAny(ExtractableCohort cohort)
        {
            var audit = cohort.AuditLog;

            if(audit.Contains(InCohortIdentificationConfiguration))
            {
                return GetObjectFromLog<CohortIdentificationConfiguration>(audit, cohort.CatalogueRepository);
            }

            if(audit.Contains(InExtractionInformation))
            {
                return GetObjectFromLog<ExtractionInformation>(audit, cohort.CatalogueRepository);
            }

            if (audit.Contains(InFile))
            {
                var m = _regexGetFilePath.Match(audit);
                if(m != null)
                {
                    try
                    {
                        return new FileInfo(m.Groups[1].Value);
                    }
                    catch (System.Exception)
                    {
                        // its not a valid filename, maybe someone hacked the Audit Log by hand
                        return null;
                    }
                }
            }

            // who knows how this cohort was created
            return null;
        }

        private T GetObjectFromLog<T>(string audit, IRepository repository) where T: class, IMapsDirectlyToDatabaseTable
        {
            var m = _regexGetID.Match(audit);

            // If the ID bit is  missing
            if (!m.Success)
            {
                return null;
            }

            try
            {
                var cicId = int.Parse(m.Groups[1].Value);
                return repository.GetObjectByID<T>(cicId);
            }
            catch (System.Exception)
            {
                // user may have hacked the AuditLog or the CohortIdentificationConfiguration may have been deleted
                // or whever knows what
                return null;
            }
        }
    }
}
