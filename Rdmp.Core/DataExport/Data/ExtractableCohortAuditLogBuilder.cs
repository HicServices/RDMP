// Copyright (c) The University of Dundee 2018-2019
// This file is part of the Research Data Management Platform (RDMP).
// RDMP is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// RDMP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with RDMP. If not, see <https://www.gnu.org/licenses/>.

using System;
using System.IO;
using System.Text.RegularExpressions;
using FAnsi.Discovery;
using Rdmp.Core.Curation.Data;
using Rdmp.Core.Curation.Data.Cohort;
using Rdmp.Core.MapsDirectlyToDatabaseTable;
using Rdmp.Core.Repositories;

namespace Rdmp.Core.DataExport.Data;

/// <summary>
///     Generates and parses strings recorded in <see cref="ExtractableCohort.AuditLog" />
/// </summary>
public partial class ExtractableCohortAuditLogBuilder
{
    private static readonly Regex RegexGetID = GetId();
    private static readonly Regex RegexGetFilePath = GetFilePath();
    private static readonly Regex RegexGetColumn = GetColumn();

    /// <summary>
    ///     regex for picking up <see cref="CohortIdentificationConfiguration" /> IDs from audit log based on a legacy way of
    ///     writing that ID into the <see cref="ExtractableCohort.AuditLog" />
    /// </summary>
    private static readonly Regex LegacyCic = GetLegacyCic();

    private const string InFile = "Patient identifiers in file";
    private const string InColumn = "Patient identifiers in column ";
    private const string InCohortIdentificationConfiguration = "Patients in CohortIdentificationConfiguration";
    private const string InExtractionInformation = "All patient identifiers in ExtractionInformation";

    /// <summary>
    ///     Returns a human readable description recording that an <see cref="ExtractableCohort" />
    ///     was generated by running the given <paramref name="cic" />
    /// </summary>
    /// <param name="cic"></param>
    /// <returns></returns>
    public static string GetDescription(CohortIdentificationConfiguration cic)
    {
        return $"{InCohortIdentificationConfiguration} '{cic}' (ID={cic.ID})";
    }

    /// <summary>
    ///     Returns a human readable description recording that an <see cref="ExtractableCohort" />
    ///     was generated by fetching identifiers from the given column <paramref name="extractionIdentifierColumn" />
    /// </summary>
    /// <param name="extractionIdentifierColumn"></param>
    /// <returns></returns>
    public static string GetDescription(ExtractionInformation extractionIdentifierColumn)
    {
        return
            $"{InExtractionInformation} '{extractionIdentifierColumn.CatalogueItem.Catalogue}.{extractionIdentifierColumn.GetRuntimeName()}'  (ID={extractionIdentifierColumn.ID})";
    }

    internal static string GetDescription(DiscoveredColumn col)
    {
        return $"{InColumn} '{col.GetFullyQualifiedName()}'";
    }

    /// <summary>
    ///     Returns a human readable description recording that an <see cref="ExtractableCohort" />
    ///     was generated by reading identifiers in the given <paramref name="file" />
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    public static string GetDescription(FileInfo file)
    {
        return $"{InFile} '{file.FullName}'";
    }

    /// <summary>
    ///     Returns the object that was the source of the given <paramref name="cohort" />.
    ///     May be a file or a <see cref="CohortIdentificationConfiguration" /> or other things or
    ///     null if its not possible to work out what created the cohort.
    /// </summary>
    /// <param name="cohort"></param>
    /// <param name="repositoryLocator"></param>
    /// <returns></returns>
    public static object GetObjectIfAny(IExtractableCohort cohort,
        IRDMPPlatformRepositoryServiceLocator repositoryLocator)
    {
        var audit = cohort.AuditLog;

        // no audit means no object
        if (string.IsNullOrWhiteSpace(audit)) return null;

        if (LegacyCic.IsMatch(audit))
            return GetObjectFromLog<CohortIdentificationConfiguration>(LegacyCic.Match(audit),
                repositoryLocator.CatalogueRepository);

        if (audit.Contains(InCohortIdentificationConfiguration))
            return GetObjectFromLog<CohortIdentificationConfiguration>(audit, repositoryLocator.CatalogueRepository);

        if (audit.Contains(InExtractionInformation))
            return GetObjectFromLog<ExtractionInformation>(audit, repositoryLocator.CatalogueRepository);

        if (audit.Contains(InFile))
        {
            var m = RegexGetFilePath.Match(audit);
            if (m.Success)
                try
                {
                    return new FileInfo(m.Groups[1].Value);
                }
                catch (Exception)
                {
                    // its not a valid filename, maybe someone hacked the Audit Log by hand
                    return null;
                }
        }

        if (audit.Contains(InColumn))
        {
            var m = RegexGetColumn.Match(audit);
            if (m.Success) return m.Groups[1].Value;
        }

        // who knows how this cohort was created
        return null;
    }

    private static T GetObjectFromLog<T>(string audit, IRepository repository)
        where T : class, IMapsDirectlyToDatabaseTable
    {
        var m = RegexGetID.Match(audit);

        // If the ID bit is  missing
        return !m.Success ? null : GetObjectFromLog<T>(m, repository);
    }

    private static T GetObjectFromLog<T>(Match m, IRepository repository) where T : class, IMapsDirectlyToDatabaseTable
    {
        try
        {
            var objId = int.Parse(m.Groups[1].Value);
            return repository.GetObjectByID<T>(objId);
        }
        catch (Exception)
        {
            // user may have hacked the AuditLog or the CohortIdentificationConfiguration may have been deleted
            // or whever knows what
            return null;
        }
    }

    [GeneratedRegex("\\(ID=(\\d+)\\)")]
    private static partial Regex GetId();

    [GeneratedRegex("Patient identifiers in file '(.*)'")]
    private static partial Regex GetFilePath();

    [GeneratedRegex("Patient identifiers in column  '(.*)'")]
    private static partial Regex GetColumn();

    [GeneratedRegex("Created by running cic ([\\d]+)")]
    private static partial Regex GetLegacyCic();
}