name: Build

# Run this workflow every time a new commit pushed to your repository

on: push
env:
  MSSQL_SA_PASSWORD: "YourStrong!Passw0rd"
  ACCEPT_EULA: "Y"
  MSSQL_PID: "developer"
  DOTNET_NOLOGO: 1

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  super-lint:
    # Name the Job
    name: Build, test, package and sign release
    # Set the type of machine to run on
    runs-on: windows-latest

    steps:
      - name: Install Node for coverage reporting
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: LCov merger tool
        run: |
          npm install -g lcov-result-merger
      - name: Checkout code
        uses: actions/checkout@v2.4.0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 5.0.x
      - name: Install MS SQL 2019
        run: Choco-Install -PackageName sql-server-2019 --params="'/IgnorePendingReboot'"
      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          root-password: 'YourStrong!Passw0rd'
          auto-start: true
      - name: Build
        run: |
          dotnet clean --configuration Release --nologo --verbosity minimal
          dotnet nuget locals all --clear
          dotnet restore -v:q
          dotnet build --configuration Release --nologo --verbosity minimal
      - name: Initialise RDMP
        run: dotnet Tools/rdmp/bin/Release/net5.0/rdmp.dll install localhost TEST_
      - name: Clean coverage output directory
        run: Remove-Item coverage -Recurse -ErrorAction Ignore
      - name: Test Reusable code
        run: dotnet test "Reusable/Tests/ReusableCodeTests/ReusableCodeTests.csproj" --nologo --collect:"XPlat Code Coverage" --no-build --verbosity minimal -c Release -r coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=  -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
      - name: Rename Reusable lcov
        shell: bash
        run: mv `find coverage -type f` recode.lcov
      - name: Test Core code
        run: dotnet test "./Rdmp.Core.Tests/Rdmp.Core.Tests.csproj" --nologo --collect:"XPlat Code Coverage" --no-build --verbosity minimal -c Release -r coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=  -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
      - name: Rename core lcov
        shell: bash
        run: mv `find coverage -type f` core.lcov
      - name: Test UI code
        run: dotnet test "./Rdmp.UI.Tests/Rdmp.UI.Tests.csproj" --nologo --collect:"XPlat Code Coverage" --no-build --verbosity minimal -c Release -r coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=  -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
      - name: Rename UI lcov
        shell: bash
        run: mv `find coverage -type f` ui.lcov
      - name: Merge LCovs
        run: lcov-result-merger "{ui,core,recode}.lcov" all.lcov
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: all.lcov
          flag-name: unit tests
      - name: Package
        run: |
          dotnet publish Application/ResearchDataManagementPlatform/ResearchDataManagementPlatform.csproj -r win-x64 -c Release -o PublishWinForms --verbosity minimal --nologo
          dotnet publish Tools/rdmp/rdmp.csproj -r win-x64 -c Release -o PublishWindows --verbosity minimal --nologo
          dotnet publish Tools/rdmp/rdmp.csproj -r linux-x64 -c Release -o PublishLinux --verbosity minimal --nologo
      - name: BundleSource
        shell: cmd
        run: powershell -noexit -executionpolicy bypass "& ./BundleSourceIntoZipFile.ps1"
      - name: Get the version
        id: get_version
        # Get the tag name e.g. v5.0.0 but skip the 'v'
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
        shell: bash

      - name: Sign
        if: contains(github.ref, 'refs/tags/v')
        shell: cmd
        run: |
            powershell.exe -nologo -noprofile -command "& { [IO.File]::WriteAllBytes(\"GitHubActionsWorkflow.pfx\", [System.Convert]::FromBase64String(\"${{ secrets.DIGICERT_PFX }}\")); }"
            "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86\\signtool.exe" Sign /f GitHubActionsWorkflow.pfx /p ${{ secrets.DIGICERT_PASSWORD }} /fd sha256 /tr http://timestamp.digicert.com /td sha256 PublishWindows/*.dll PublishWindows/*.exe  PublishLinux/*.dll PublishWinForms/*.exe PublishWinForms/*.dll
            mkdir dist
            powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::CreateFromDirectory('PublishWindows', 'dist/rdmp-cli-win-x64.zip'); [IO.Compression.ZipFile]::CreateFromDirectory('PublishLinux', 'dist/rdmp-cli-linux-x64.zip'); [IO.Compression.ZipFile]::CreateFromDirectory('PublishWinForms', 'dist/rdmp-client.zip');}"
      
      - name: Nuget packages
        if: contains(github.ref, 'refs/tags/v')
        run: |
          nuget pack Plugins/Plugin/Plugin.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Plugins/Plugin.UI/Plugin.UI.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Plugins/Plugin.Test/Plugin.Test.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Application/ResearchDataManagementPlatform/RDMP.nuspec -Properties Configuration=Release -Version ${{ steps.get_version.outputs.VERSION }}

          nuget push HIC.RDMP.Plugin.${{ steps.get_version.outputs.VERSION }}.nupkg -skipDuplicate -Source https://api.nuget.org/v3/index.json -ApiKey ${{ secrets.NUGET_KEY }}
          nuget push HIC.RDMP.Plugin.UI.${{ steps.get_version.outputs.VERSION }}.nupkg -skipDuplicate -Source https://api.nuget.org/v3/index.json -ApiKey ${{ secrets.NUGET_KEY }}
          nuget push HIC.RDMP.Plugin.Test.${{ steps.get_version.outputs.VERSION }}.nupkg -skipDuplicate -Source https://api.nuget.org/v3/index.json -ApiKey ${{ secrets.NUGET_KEY }}
          
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@2.2.1
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*.zip
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
