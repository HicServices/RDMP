//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using MapsDirectlyToDatabaseTable;
using Rdmp.Core.CohortCreation;
using Rdmp.Core.CohortCreation.Execution;
using Rdmp.Core.CommandExecution;
using Rdmp.Core.CommandExecution.AtomicCommands;
using Rdmp.Core.Curation.Data;
using Rdmp.Core.Curation.Data.Aggregation;
using Rdmp.Core.Curation.Data.Cohort;
using Rdmp.Core.Providers;
using System;
using System.Data;
using System.Threading;
using Terminal.Gui;

namespace Rdmp.Core.CommandLine.Gui {
        
    public partial class ConsoleGuiCohortIdentificationConfigurationUI {
        private readonly IBasicActivateItems _activator;
        CohortIdentificationConfigurationUICommon Common = new ();
        Timer timer;
        private bool _isDisposed;

        public ConsoleGuiCohortIdentificationConfigurationUI(IBasicActivateItems activator, CohortIdentificationConfiguration cic) {
            InitializeComponent();
            
            this._activator = activator;
            Common.Activator = activator;

            timer = new Timer(refreshColumnValues,null,0, 2000);

            Common.Compiler.CoreChildProvider = activator.CoreChildProvider;

            Common.Configuration = cic;
            Common.Compiler.CohortIdentificationConfiguration = cic;
        }


        protected override void Dispose(bool disposing)
        {
            timer.Dispose();
            _isDisposed = true;

            base.Dispose(disposing);
        }
        private void refreshColumnValues(object state)
        {
            if (!_isDisposed)
                BuildTable();
        }

        private void BuildTable()
        {
            var childProvider = _activator.CoreChildProvider;

            var tbl = tableview1.Table;
            tbl.Rows.Clear();

            AddToTable(tbl, Common.Configuration, childProvider, 0);

            tableview1.Update();
        }

        private void AddToTable(DataTable tbl, object o, ICoreChildProvider childProvider, int indents)
        {
            var r = tbl.Rows.Add();

            r["Name"] = new string(' ',indents) + o.ToString();
            r["Execute"] = Common.ExecuteAspectGetter(o);
            r["Cached"] = Common.Cached_AspectGetter(o);
            r["CumulativeTotal"] = Common.CumulativeTotal_AspectGetter(o);
            r["Working"] = Common.Working_AspectGetter(o);
            r["Time"] = Common.Time_AspectGetter(o);
            r["Catalogue"] = Common.Catalogue_AspectGetter(o);
            r["ID"] = o is IMapsDirectlyToDatabaseTable m ? m.ID : DBNull.Value;

            foreach (var c in childProvider.GetChildren(o))
            {
                AddToTable(tbl, c, childProvider, indents++);
            }
        }
    }
}
